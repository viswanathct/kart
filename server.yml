---
# #Note: This is defined separately, as it's shared by multiple apps.
imports:
  - eka.shorthands.types.* # Provides type shorthands.

Server:
  type: group
  scope: server
  children:
    Shop: # The same structure is used to define, both the data and the UI schemas.
      type: object # id is assumed to be the param for read requests.
      fields:
        id: integer
        name: string
        address: string
        lat: double, store
        long: double, store
        dit: Duration
        rating: double
        avgCost: double
        Tags: List<string>
        Cuisines: List<string>
        Offers: List<Offer> # #ToDo: Define an offer object, which would allow a free dessert of values less than fifty rupees, for orders of value greater than 150.
      error: shop-fetch-failed

    Dish:
      fields:
        id: integer
        Shop: Shop # The data type of the field would be that of the id of the Complex type (Shop). This also creates a foreign key constraint on RDBMS. The capital case on the field name also signifies this.
        classification: [string]
        unitPrice: double
        taxPercentage: 0.05, double, hidden # The first item is interpreted as a hard-coded value, as it doesn't match any other variable.
        Customizations:
          type: List
          element: # This is a JSON field.
            key: name
            fields:
              name: string
              cost: double

    promo:
      id: string
      effect: {} # Should be an effect overriding the Cart.
