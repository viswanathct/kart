---
# #Note: This is defined separately, as it's shared by multiple apps.
imports:
  - eka.shorthands.types.* # Provides type shorthands.
  - shared

declarations:
  CurrentUser: User[Session.id] # This would be null, till a session is created. #Note: The id is not necessary, as it would be inferred.

structure:
  Server:
    type: group
    sharing: readOnly
    members:
      Config:
        fields: {} # A global state value with multiple config variables. It's not defined, in the interest of brevity.

      User:
        fields:
          id:
            providers: mobileNumber
            alias: mobileNumber
          username: string
          password: password # The fields is encrypted and private by default.
          email: email

      Shop: # The same structure is used to define, both the data and the UI schemas.
        type: object # 'id' is assumed to be the param for read requests. The request format is configurable to use query-strings or URL parts. #ToDo: Think whether the type could be named as resource.
        fields:
          id: integer
          name: string
          address: string
          lat: double, store
          long: double, store
          deliveryTime:
            title: Delivery Time # Titles are human readable names of fields, they aren't passed along with the data, but with the schema.
            value: services.getDeliveryTime(Shop, CustomerLocation)
          offer:
            type: shared.range # This is a mixin.
            dataType: integer
            min: 0
            max: 100
            default: 0 # Any property not processed by a mixin will be left as is.
          promoText: string
          notes: string
          rating: double
          relevance:
            providers: double
            value: services.getShopRelevance(CurrentUser) # Evaluated fields aren't persisted to the DB, by default.
          operatingHours: list<Interval> # Ex: [0-1, 3-5]
          avgCost:
            type: double
            title: Cost for two
          Tags: list<string>
          Cuisines: list<string>
          Offers: list<Offer> # #ToDo: Define an offer object, which would allow a free dessert of values less than fifty rupees, for orders of value greater than 150.
        error:
          type: generic
          message: "Operation failed." # The system itself should have predefined, context-specific error codes and messages.

      Shops: # This wouldn't be persisted, as it's a map.
        type: map # #Later: The notation map<Shop> could be used, after the implementation of DSL parsing.
        element: shop
        # The id is assumed to be the key. Alternatively, it could be map<Shop.id, Shop>.
        filter:
          value: None => services.isShopWithinRadius(CustomerLocation, Config.deliveryRange) # The table shop is inferred to be iterated from the element type (shop). This also maps to the resource /Shops/{CustomerLocation}, as the server doesn't know the value (it knows Config.deliveryRange, though). The request is made again, when the CustomerLocation changes. #Note: This flow depends upon the scope of the call isShopWithinRadius limited to the server (ie: it shouldn't be available in the client).
        limit: 100
        orderBy: relevance descending

      Cuisines:
        filter: in(name, Shops.shop.Cuisines) # Functions use RPN. ie: a + b becomes +ab.
        fields:
          name: string

      Dish:
        readOnly: true
        fields:
          id: integer
          Shop: Shop # The data type of the field would be that of the id of the Complex type (Shop). This also creates a foreign key constraint on RDBMS. The capital case on the field name also signifies this.
          classification: [string]
          image: url
          text: string
          unitPrice:
            type: shared.range # This is a mixin.
            dataType: currency
            min: 0
            max: 15.8
            default: 0 # Any property not processed by a mixin will be left as is.
          taxPercentage:
            type: double
            default: 0.05
          Customizations:
            type: list
            key: name
            element: # This is a JSON field.
              fields:
                name: string
                cost: currency

      UserWritable: # Groups can be nested.
        type: group
        sharing: readAndWrite
        filter:
          extend: User == CurrentUser # This filter is added to every child of the group.
          error:
            type: errors.permission # This would be converted to proper HTTP error codes and messages by the builders.
        fields: # Like other properties, fields to are overlaid on all the members.
          User:  # #Note: Later on this variable might be skipped in the client as it isn't used there.
            sharing: private
            value: CurrentUser
        members:
          Order:
            filter: state == 'current'
            fields:
              Shop: Shop
              state:
                type: enum('current', 'placed', 'dispatched', 'delivered', 'cancelled')
              DeliveryAddress:
                type: CustomerAddress
                sharing: writeOnly # This forces the customer to fill in the address, every time before ordering.
              Items:
                type: list
                element:
                  name: OrderItem
                  fields: # Items could be read from and written to their own table (if the platform is an RDBMS), as the declaration has its own fields. The name is optional and defaults to Order.Items.
                    Order: Order
                    Dish: Dish # Only the id of the dish gets transferred, and the Server converts it back to the dish, as it knows the type.
                    Customizations:
                      type: delimitedList
                      delimiter: '\n'
                      filter: in(Customizations, Dish.Customizations) # #Note: Customizations aren't defined as a separate type, for the sake of simplicity and to demonstrate the said simplicity.
                    cost:
                      sharing: private # private fields are evaluated locally and not shared. These are helpful, when multiple local evaluations are needed on the field.
                      value: Dish.unitPrice + sum(Dish.Customizations[Customizations].cost) # Evaluated values are rendered as read-only elements by the UI. The data type in this cases would be used to format the output.
              subTotal: private, sum(Items.cost) # The second item is assigned to the property, value. It's so as the expression doesn't resolve to a provider.
              taxes:
                sharing: private
                value: reduce(Items, 0, (Items, Item, trailing => trailing += Item.Dish.taxes)) # This isn't written as sum(Items.Dish.taxes), so to demonstrate the function, reduce.
              netTotal:
                sharing: private
                value: subTotal + deliveryCharge + taxes # #Note: The order of evaluation is not sequential, but based on need (lazy evaluation).
              remarks:
                type: string
                optional: true # The default value is false.
              deliveryCharge: # This is a structural form of a function (which could be coded to). This is written so, to showcase function structures.
                type: function
                name: case
                param: Cart.subTotal
                cases:
                  param > Config.freeDeliveryMinimum: 0
                  default: Config.deliveryCharge

        CustomerAddress:
          limit: 5 # This will limit both the reads and writes.
          providers: shared.location
          fields:
            addressText: string

        Favorite:
          filter: Shop == SelectedShop
          fields:
            Shop: # No fields are returned, as the client just depends on the count of the returned objects.
              type: Shop
              sharing: private

        Favorites:
          source: Favorite
          type: list

        DeliveredOrders:
          source: Order
          filter: state == 'delivered'
          orderBy: createdAt

        Profile:
          providers: User
          fields:
            id:
              sharing: private
            username:
              sharing: readOnly

      Offers:
        fields:
          code: string
          text: string
          conditions: json

      Promo:
        id: string
        weightage: double
        effect: {} # Should be an effect overriding the Cart.

      KeyValueStore:
        key: string
        value: string

  Buffer:
    type: group
    persist: false # This tells the store handlers, to skip processing the item. Alternatively, a type, buffer could be passed.
    members:
      Session:
        providers: User
        filter: password == User[id].password # Password always evaluated to the decrypted version.
        fields:
          username:
            sharing: readOnly

      InitData:
        greeting:
          filter: KeyValueStore.key == Config.locale + '.greeting.' + currentTime() // 6
          value: KeyValueStore.value

      DishSuggestions:
        value:
          value: Dish # This creates an anonymous collection.
          filter: distance < 3
          orderBy: distance descending
          limit: 100
          fields:
            distance:
              sharing: private
              value: service.levenshteinDistance(name, searchText)
        groupBy: Shop
        limit: 6
        fields: # The structure of the nested result.
          Shop: Shop
          Dishes: slice(Dish, 0, 3)
