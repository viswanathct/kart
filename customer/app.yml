---
# #Note: The structures, alike, are often represented by different syntax, so to showcase the possibilities.

namespace: customerApp # When a namespace is not given, the filename is considered as the namespace.

imports:
  - eka.shorthands.types.* # Provides type shorthands.
  - services
  - customerServer #Note: Dictionaries could be used to implement python style, as keyword. Ex: {server: customerServer}. But this could be a bit verbose.
  - customerServer.*
  - shared.location

declarations: # Declarations are a way to declare aliases and bindings. ie: They couldn't be used to configure structures or have expressions for evaluation.
  server: customerServer # This is an alias, for an implicit import.

structure:
  CustomerLocation: location
  SelectedShop:
    type: Shop
    route: ShopFront # Route to the screen, ShopFront when a shop is clicked. If the element were in another tab, it would (should) be brought forth too. ie: It couldn't be routed if the containing tab is disabled.
  Session: server.Session
  isOnHoliday: today() not in shop.holidays # shop is assumed to be the parameter.
  ShopsOnHoliday: filter(Shops, isOnHoliday)
  searchText:
    type: string
    minLength: 3 # The value won't change until this number of characters are entered.
  SearchCache:
    type: cachedList
    observe: searchText

  Filters:
    children:
      tagFilter: Shop => hasMatch(Shop.Tags, App.Home.FiltersSelection.AppliedTagFilters) # #Note: The function itself, should be optimized for empty lists. Variable dependency too should be taken care of.
      cuisineFilter: Shop => hasMatch(Shop.Cuisines, filter(FiltersSelection.Cuisines, true))
      searchFilter: Shop => when(searchText, service.levenshteinDistance(Shop.name, searchText) < 3) # Returning 'undefined' is interpreted as not filtered. #Note: The same filters could be used on the server side too.

  Server:
    type: group # The configuration of a group are shared by all of its members. #Note: Groups don't have a scope of their own; ie: the members of the group will live in the scope where the group is declared.
    providers: server # A namespace as a provider allows the overriding / overlaying of the members of the scope locally.
    members:
      Shops:
        value: server.Shops
        refreshes:
          timed:
            condition: app.inactive # App is a global object provided by the handler.
            duration: 5m # This follows the default time-notation 1y1M1d0h1m1s.
        filter: allOf(Filters.tagFilter, Filters.cuisineFilter) # allOf, essentially is a readable-and, where as an or would be oneOf.
        orderBy: sortOrder

      Shop:
        action: SelectedShop = Shop # The default action is a touch or a click.
        fields:
          hasOffers: offer > 0.0
          isAvailable:
            type: boolean
            value: shop not in ShopsOnHoliday and now() in shop.operatingHours # Values can also be SQL expressions. operatingHours is a list of Intervals, a custom type, that implements the operator, in.

      Dish: # The config overrides the values of server.Dish locally, as the server is the providing namespace.
        # providers: server.Dish # Providers provide the base for the object. The provided properties are overridden by customizations. There could be multiple providers (as a list) for an object.
        filter: Dish.Shop == SelectedShop # This would query the route /Dish?Shop=<SelectedShop.id>. The filter would not apply to client actions, as they don't affect the list (values of this list are set only from the server).
        fields:
          image:
            size: small # This could also be in the description of the object dish. #Note: Though the structure has two variations of the Dish, the original and the customized, only the later will be built as the former isn't used anywhere else.
          taxPercentage:
            hidden: true
        actions:
          addOrderItem:
            title: '+'
            sequence:
              - Order.Shop = Shop
              - 'Order.Items.add({Dish: Dish, Customizations: collect(App.Dish.Customizations})' # The collect function collects the data through a generated form, based on the given schema.
          removeOrderItem:
            title: '-'
            enabled: count(filter(Order.Items.Dish, Dish)) # When value is given for filter, other than a function, an equality check would be done.
            sequence:
              - Order.Items.remove(last(filter(Order.Items, OrderItem => OrderItem.Dish == Dish)))

        Order: # This will query the route "/Order", no params would be passed though, as the server knows the values. The call to create would be an update instead, if there were an Order returned from the server.
          sync: noWait # This tells that, any change to the object should be synced with the server. This also is a two-way sync, so any unsubmitted order from the server would be posted to the app, on load. In case of a failed sync, the object would be restored to its prior state. This is the case with errors too.
          fields: # Note: The field, User is bound to the Session, this automatically imports the Session from the server structure.
            Shop:
              filter: Incoming => when(Shop != Incoming, confirm("Want to discard items from $Shop.name and buy from $Incoming.name?", Incoming)) # #Note: Filter functions on values are used as transformation hooks, any truthy value returned from such a function would be passed to the underlying setter.
            DeliveryAddress: collect(Addresses)
            state:
              sync: wait # The state change of the Order depends upon a success response from the server. #Note: Though wait, is the default option for sync, it's mentioned to override the parent config and to demonstrate.
              filter: ensure(DeliveryAddress) # #Note: For this to work ensure shouldn't return any value. Also, the filter had to be here, as the data, which is synced to the do not have a submit method.
              hidden: true
            Items:
              filter: Items.Dish.Shop == SelectedShop

      DeliveredOrders:
        value: server.DeliveredOrders
        type: list
        element: server.DeliveredOrder

  App:
    type: ui
    route: MainScreen # The starting screen of the app.
    config: {} # A placeholder for handler specific data. The core won't touch this property. ie: The data is passed as given, without extending, et all.
    errorContent:
      noConnection: image # #Note: This image is shown on all containers whose fetches fail.
      default: image
    nodes:
      MainScreen:
        Tabs:
          # type: tree # It's used for readability, by wrapping its elements under *nodes* properties.
          # tree: {}
          nodes:
            Home:
              title: Near you
              nodes:
                CustomerLocation: Global.CustomerLocation = services.getUserLocation() # The keyword, Global is for mere demonstration.

                FiltersSelection: # Example for an hybrid (UI+Data) object.
                  action: collect(FilterOptions)
                  nodes:
                    FilterOptions:
                      title: Filter
                    actions:
                      Reset:
                        action: Tags = false && Cuisines = false
                      Apply:
                        enabled: Tags || Cuisines
                        route: MainScreen
                    fields: # #Note: The type of the resource is inferred to be 'object' due to the existence of the property, fields.
                      Tags:
                        hasOffers:
                          type: boolean
                          value: False
                        isPureVeg:
                          type: boolean
                          value: False # #Note: The value signifies, whether the filter is applied or not.
                      Cuisines:
                        value: server.Cuisines
                        multiSelect: true
                  children:
                    AppliedTagFilters: filter(FilterOptions.Tags, true) # #Note: This variable is used for caching the function results. There is a plan to implement lazy evaluation, on functions, so that there won't be a need for explicit caching.

                Greeting: server.InitData.greeting

                Promos:
                  type: list<Promo> # This essentially is a shorthand for a list of promos.
                  orderBy: weightage descending # The weightage is of the element.

                MasterScroll:
                  type: kart.asidedList # This is a custom UI component.
                  list:
                    ShopSelector:
                      elements:
                        shopCount: 'template("$1 Restaurants", count(Shops))'
                        sortOrder:
                          type: list
                          values: rating descending, deliveryTime, avgCost # The list text would be inferred from the title / name of the options (from the Schema provided by the server).
                        ShopsList:
                          value: Shops
                          sortOrder: sortOrder
                  # asidesNavigation: auto # This is generated automatically. The images for the navigation are inferred from the names of the asides. These images are collected by the builder during the build process.
                  Asides:
                    group:
                      value: Shops
                      limit: 10
                      filter:
                        extend: shop.isAvailable
                    members:
                      WithOffers: # When there aren't any items, the element is hidden, so is its navigation link.
                        filter: shop.Tags.offer # This is checked for a truthy value.
                        title: Offers Near You
                      FastestDelivery:
                        filter: shop.deliveryTime < 35m
                        orderBy: Shop.deliveryTime
                        title: Super fast delivery
                        subTitle: Lightning fast delivery in 35 minutes or less. T&C apply.
                        element:
                          value: Shop.Cuisines
                          limit: 3
                          cusines: join(Cuisines, ", ")
                      TopRatedByCuisine: {}
                UnavailableToday:
                  title: Unavailable today
                  value: ShopsOnHoliday
                OpeningSoon:
                  children:
                    openingTime: Interval(currentTime(), currentTime() + 1h)
                  title: Opening by $openingTime
                  value: Shops
                  filter: shop not in ShopsOnHoliday and openingTime in shop.operatingHours

            Explore: # In the absence of a title, TabSwitcher takes the key as the title for that tab.
              nodes:
                searchText:
                  placeholder: 'Search for restaurants and dishes.'
                  value: searchText
                  handler: plugins.autoFill
                  plugins.autoFill.config: # This config is for the plugin, autoFill.
                    limit: 10
                panes:
                  type: container # Only one node of a container would be visible at a time.
                  nodes:
                    RecentSearches:
                      title: 'Recent searches'
                      value: SearchCache
                      action: SelectedText => searchText = SelectedText
                      hidden: not searchText
                    Results:
                      TabSwitcher:
                        type: ui.tabSwitcher
                        tabs:
                          Restaurants:
                            title: 'when(count(), "Related to ", "Sorry no restaurants match: ") + searchText'
                            value: Shops
                            filter: Filters.searchFilter
                            limit: 20
                            emptyContent: image
                          DishSuggestions:
                            title: Dishes
                            value: server.DishSuggestions
                            emptyContent: image
                            element:
                              Shop:
                                nodes:
                                  Dishes: DishSuggestions.Dishes # The elements use the same view as other dishes, as the data-type is the same.
                                  link:
                                    title: 'Full menu'
                                    action: SelectedShop = Shop
                                    route: Dishes
            Cart:
              value: Order # This binds the Cart to the Order.
              emptyContent: image # Empty content is also shown for empty dictionaries, not just empty lists.
              ui.TabSwitcher.Config: # The key is not needed, but present as a demo.
                tabNotification: count # This is processed by the TabSwitcher.
              fields:
                Items: # This overlays Order.Items
                  groupBy: Items.Dish, Items.Customizations # #Later: Indexes on groupBy columns could be auto-generated to make the calculation cycles efficient.
                  fields:
                    cost: sum(Items.cost) # All fields that aren't in groupBy should be over-rode with aggregators, any field which isn't won't be in the result. #Note: Items, here, resolve to the grouped Items, not the ungroupped Items. The later could be accessed through the notation, Cart.Items.
                    count: count()
                  actions:
                    addOrderItem:
                      title: '+'
                      action: OrderItem => Order.Items.add(OrderItem)
                    removeOrderItem:
                      title: '-'
                      sequence:
                        - "Order.Items.remove(last(filter(Order.Items,
                            OrderItem => OrderItem.Dish == Items.Dish && OrderItem.Customizations == Items.Customizations
                          ))"
                DeliveryAddress:
                  hidden: Session
                LoginLink:
                  hidden: '!Session'
                  elements:
                    title: Almost there
                    subTitle: Login or signup to place your order
                  action: Session.create()
              actions:
                placeOrder:
                  title: 'Order'
                  filter: DeliveryAddress # This property maps to the enabled property of the action.
                  action: Order.state = 'placed' # The Order isn't submitted, as it's synced. Any state dependent state / action would be processed once the server returns a success.
                  # action: submit(Order) # Submission is not possible for synced data.

          Account:
            nodes:
              Profile:
                value: Profile
                action: Profile.edit().update()

              MyAccount:
                type: menu.verticalTree # This renders the child nodes as a menu.
                title: 'My Account'
                nodes:
                  manageAddress:
                    title: Manage Address
                    action: collect(CustomerAddress)
                  Payments:
                    route: Payments # This could be inferred from the node name too.
                  Favorites: {}
                  Referrals: {}
                  Offers: {}
              Help:
                title: 'Help & FAQ'
                nodes:
                  HelpScreen:
                    type: ui.screen
                    nodes:
                      RecentOrder:
                        title: 'Recent Order'
                        limit: 1 # This uses a cached response.
                        value: DeliveredOrders
                      PreviousOrders:
                        title: 'Have issues with previous orders?'
                        nodes:
                          PreviousOrdersScreen:
                            route: DeliveredOrders
              DeliveredOrders:
                title: 'Past Orders'
                value: DeliveredOrders
              logout:
                action: Session.delete()

        TabSwitcher:
          type: ui.tabSwitcher
          tabs: App.Tabs
          images: true

      ShopFront:
        children:
          DishSearch:
            type: string
            minLength: 3

        nodes:
          favorite:
            action: when(isFavorite, Favorite.delete(), Favorite.create())
            fields:
              isFavorite: boolean, Favorite # #Note: /Favorite?Shop=<SelectedShop>&User=<Session.User> returns an empty list when the Shop isn't favored, which is converted to false then.
            class:
              highlight: isFavorite
            search:
              action: collect(DishSearch)
          Dishes: # #Note: The structure is simplified for demonstration.
            value: Dishes
            filter: when(DishSearch, filter(service.levenshteinDistance(Dish, DishSearch) < 3))

      Dish:
        elements:
          Customizations:
            multiSelect: true

      Dishes:
        type: list # No UI spec is given, so spec would be the same as the default of the handler, for such a structure.
        element: Dish

      Addresses:
        type: list # #Note: The methods ui.collect and ui.choose work differently on lists.
        value: server.CustomerAddress
        actions: create, update, delete # The update, calls the collect method on the elements.
        multiSelect: false # It's the default, yet given as demonstration.
        # limit: 5 # This will limit both the reads and writes. Later on, the server to could implement the limit, as long as the collection isn't accessed for other purposes. Incase of clashing limits, the highest limit might be applied.
        # navigation:
          # type: page # The default is scroll.
          # pageSize: 5 # The default is auto.

      Favorites:
        # children:
        #   inFavourites: filter: Shop in server.Favorites # This provider too could be used instead of a group.
        group:
          elements:
            '*':
              filter: Shop in server.Favorites
        members:
          elements:
            ShopSelector: MainScreen.MasterScroll.ShopSelector # This element is just a proxy to the original.
            UnavailableToday: MainScreen.UnavailableToday
            OpeningSoon: MainScreen.OpeningSoon

      Referrals:
        image: url
        text: string
        actions:
          invite: Invite and earn
          action: service.share(Session.User)

      Offers: server.Offers

# #Note: Some features (like the tracking screen) and nuances (like Dish category) aren't implemented, as they were thought to be an overkill.
